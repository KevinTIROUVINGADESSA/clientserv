{"ast":null,"code":"var _objectWithoutProperties = require(\"/home/kev1/deewee-app/client/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nconst resolvePaths = require('./utils/resolvePaths');\n\nconst circularize = require('./utils/circularize');\n\nconst createJob = require('./createJob');\n\nconst _require = require('./utils/log'),\n      log = _require.log;\n\nconst getId = require('./utils/getId');\n\nconst _require2 = require('./constants/config'),\n      defaultOEM = _require2.defaultOEM;\n\nconst _require3 = require('./worker/node'),\n      defaultOptions = _require3.defaultOptions,\n      spawnWorker = _require3.spawnWorker,\n      terminateWorker = _require3.terminateWorker,\n      onMessage = _require3.onMessage,\n      loadImage = _require3.loadImage,\n      send = _require3.send;\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n\n  const _resolvePaths = resolvePaths({ ...defaultOptions,\n    ..._options\n  }),\n        logger = _resolvePaths.logger,\n        errorHandler = _resolvePaths.errorHandler,\n        options = _objectWithoutProperties(_resolvePaths, [\"logger\", \"errorHandler\"]);\n\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({\n    id: jobId,\n    action,\n    payload\n  }) => new Promise((resolve, reject) => {\n    log(`[${id}]: Start ${jobId}, action=${action}`);\n    setResolve(action, resolve);\n    setReject(action, reject);\n    send(worker, {\n      workerId: id,\n      jobId,\n      action,\n      payload\n    });\n  });\n\n  const load = jobId => startJob(createJob({\n    id: jobId,\n    action: 'load',\n    payload: {\n      options\n    }\n  }));\n\n  const loadLanguage = (langs = 'eng', jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs,\n      options\n    }\n  }));\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'initialize',\n    payload: {\n      langs,\n      oem\n    }\n  }));\n\n  const setParameters = (params = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'setParameters',\n    payload: {\n      params\n    }\n  }));\n\n  const recognize = async (image, opts = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'recognize',\n    payload: {\n      image: await loadImage(image),\n      options: opts\n    }\n  }));\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'getPDF',\n    payload: {\n      title,\n      textonly\n    }\n  }));\n\n  const detect = async (image, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'detect',\n    payload: {\n      image: await loadImage(image)\n    }\n  }));\n\n  const terminate = async jobId => {\n    if (worker !== null) {\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate'\n      }));\n      terminateWorker(worker);\n      worker = null;\n    }\n\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId,\n    jobId,\n    status,\n    action,\n    data\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data,\n          length: Object.keys(data).length\n        });\n      }\n\n      resolves[action]({\n        jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(data);\n    }\n  });\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate\n  };\n};","map":null,"metadata":{},"sourceType":"script"}